generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  password      String?
  name          String?
  image         String?
  role          UserRole  @default(USER)
  emailVerified DateTime? @map("email_verified")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  cart     Cart?
  orders   Order[]
  accounts Account[]
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  // Relationships
  products ProductCategory[]
}

model Product {
  id                   String      @id @default(auto()) @map("_id") @db.ObjectId
  title                String
  description          String?
  price                Int // Stored in cents
  discountPercentage   Float?
  rating               Float?
  stock                Int
  brand                String?
  sku                  String?
  weight               Float?
  dimensions           Dimensions?
  warrantyInformation  String?
  shippingInformation  String?
  availabilityStatus   String?
  returnPolicy         String?
  minimumOrderQuantity Int?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt

  // Tags
  tags String[] // Changed to a string array for tags

  // Relationships
  images     String[] // URLs for images
  thumbnail  String // URL for thumbnail image
  categories ProductCategory[] // Many-to-many with Category
  cartItems  CartItem[] // Changed to plural for consistency
  orderItems OrderedItem[] // Changed to plural for consistency
}

model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user  User       @relation(fields: [userId], references: [id])
  items CartItem[] // Renamed from 'cartItems' to 'items' for simplicity
}

model CartItem {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  quantity Int

  // Relationships
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
}

model OrderedItem {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  quantity Int

  // Relationships
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  total     Int // Stored in cents
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relationships
  userId String        @db.ObjectId
  user   User          @relation(fields: [userId], references: [id])
  items  OrderedItem[] // Renamed from 'orderItems' to 'items' for simplicity
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?  @map("refresh_token") // Renamed with camelCase
  accessToken       String?  @map("access_token") // Renamed with camelCase
  expiresAt         Int?     @map("expires_at") // Renamed with camelCase
  tokenType         String?  @map("token_type") // Renamed with camelCase
  scope             String?
  idToken           String?  @map("id_token") // Renamed with camelCase
  sessionState      String?  @map("session_state") // Renamed with camelCase
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model ProductCategory {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Relationships
  productId  String   @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id])
  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])
}

// Custom types for better structure
type Dimensions {
  width  Float
  height Float
  depth  Float
}

type Review {
  rating        Float
  comment       String
  date          DateTime
  reviewerName  String
  reviewerEmail String
}

type MetaData {
  barcode   String
  qrCode    String
  createdAt DateTime
  updatedAt DateTime
}
